#%RAML 1.0
title: Hancock - DLT Adapter
version: v1
baseUri: https://host/{version}/dlt-adapter
documentation:
 - title: Summary
   content: !include README.md

mediaType: application/json

types:
  SmartContractRequest: !include schemas/requests/ethereum/smartContracts/register.json
  TransactionInvokeByParamRequest: !include schemas/requests/ethereum/smartContracts/transactionInvokeByParam.json
  TransactionInvokeRequest: !include schemas/requests/ethereum/smartContracts/transactionInvoke.json
  TransactionDeployRequest: !include schemas/requests/ethereum/smartContracts/transactionDeploy.json
  TransferRequest: !include schemas/requests/ethereum/transfers/transfer.json
  ProtocolEncodeModelRequest: !include schemas/requests/protocol/encode.json
  ProtocolDecodeModelRequest: !include schemas/requests/protocol/decode.json
  TransferTokenRequest: !include schemas/requests/ethereum/token/transfer.json
  TransferTokenByQueryRequest: !include schemas/requests/ethereum/token/transferByQuery.json
  TransferFromTokenRequest: !include schemas/requests/ethereum/token/transferFrom.json
  TransferFromTokenByQueryRequest: !include schemas/requests/ethereum/token/transferFromByQuery.json
  ApproveTransferTokenRequest: !include schemas/requests/ethereum/token/approveTransfer.json
  ApproveTransferTokenByQueryRequest: !include schemas/requests/ethereum/token/approveTransferByQuery.json
  AllowanceTokenRequest: !include schemas/requests/ethereum/token/allowance.json
  AllowanceTokenByQueryRequest: !include schemas/requests/ethereum/token/allowanceByQuery.json
  RegisterTokenRequest: !include schemas/requests/ethereum/token/register.json

  GenericResponse: !include schemas/responses/generic.json
  SmartContractResponse: !include schemas/responses/ethereum/smartContracts/registered.json
  SmartContractListResponse: !include schemas/responses/ethereum/smartContracts/registeredList.json
  TransactionInvokeResponse: !include schemas/responses/ethereum/smartContracts/transactionInvoke.json
  TransactionDeployResponse: !include schemas/responses/ethereum/smartContracts/transactionDeploy.json
  TransferResponse: !include schemas/responses/ethereum/transfers/transfer.json
  GetBalanceResponse: !include schemas/responses/ethereum/getBalance.json
  ProtocolDecodeModelResponse: !include schemas/responses/protocol/decode.json
  TransferTokenResponse: !include schemas/responses/ethereum/token/transfer.json
  TransferTokenByQueryResponse: !include schemas/responses/ethereum/token/transferByQuery.json
  TransferFromTokenResponse: !include schemas/responses/ethereum/token/transferFrom.json
  TransferFromTokenByQueryResponse: !include schemas/responses/ethereum/token/transferFromByQuery.json
  ApproveTransferTokenResponse: !include schemas/responses/ethereum/token/approveTransfer.json
  ApproveTransferTokenByQueryResponse: !include schemas/responses/ethereum/token/approveTransferByQuery.json
  AllowanceTokenResponse: !include schemas/responses/ethereum/token/allowance.json
  AllowanceTokenByQueryResponse: !include schemas/responses/ethereum/token/allowanceByQuery.json
  GetBalanceTokenResponse: !include schemas/responses/ethereum/token/getTokenBalance.json
  RegisterTokenResponse: !include schemas/responses/ethereum/token/register.json
  GetMetadataTokenResponse: !include schemas/responses/ethereum/token/getTokenBalance.json

securitySchemes:
  oauth_2_0: !include ./securitySchemes/oauth_2_0.yml

/{dlt_type}:
  displayName: DLT
  description: API to adapt transactions to specific DLT

  uriParameters:
    dlt_type:
      type: string
      description: Dlt to work with 

  /smartcontracts:
    get:
      description: Retrieve the list of all smart contracts registered in Hancock
      responses:
        200:
          body:
            application/json:
              type: SmartContractListResponse
        500:
          body:
            application/json:
              type: GenericResponse

    /{address|alias}:
      uriParameters:
        address|alias:
          type: string

      get:
        description: Retrieve ABI from registered Smart Contract
        headers:
        responses:
          200:
            body:
              application/json:
                type: SmartContractResponse
          404:
            body:
              application/json:
                type: GenericResponse
          500:
            body:
              application/json:
                type: GenericResponse

      delete:
        description: Unregister the Smart Contract in Hancock
        headers:
        responses:
          204:
          500:
            body:
              application/json:
                type: GenericResponse

    /deploy:
      post:
        description: Adapt a Smart Contract deployment transaction
        body:
          application/json:
            type: TransactionDeployRequest
        responses:
          200:
            body:
              application/json:
                type: TransactionDeployResponse
          400:
          500:
            body:
              application/json:
                type: GenericResponse

    /invoke:
      post:
        description: Adapt a Smart Contract invocation transaction
        body:
          application/json:
            type: TransactionInvokeRequest
        responses:
          200:
            body:
              application/json:
                type: TransactionInvokeResponse
          400:
          500:
            body:
              application/json:
                type: GenericResponse

      /{address|alias}:
        uriParameters:
          address|alias:
            type: string

        post:
          description: Adapt transaction that will invoke a method in the registered Smart Contract
          headers:
          body:
            application/json:
              type: TransactionInvokeByParamRequest
          responses:
            200:
              body:
                application/json:
                  type: TransactionInvokeResponse
            400:
            404:
              body:
                application/json:
                  type: GenericResponse
            500:
              body:
                application/json:
                  type: GenericResponse

    /register:
      post:
        description: Register a deployed Smart Contract
        headers:
        body:
          application/json:
            type: SmartContractRequest
        responses:
          201:
            body:
              application/json:
                type: GenericResponse
          400:
          409:
            body:
              application/json:
                type: GenericResponse
          500:
            body:
              application/json:
                type: GenericResponse

  /transfers:
    displayName: AdaptTransfer
    post:
      description: Adapt a transfer call to the DLT between to address
      body:
        application/json:
          type: TransferRequest
      responses:
        200:
          body:
            application/json:
              type: TransferResponse
        400:
        500:
          body:
            application/json:
              type: GenericResponse
      
  /balance:
    /{address}:
      uriParameters:
        address:
          type: string
      get:
        description: Obtain the native cryptocurrency balance of an address
        responses:
          200:
            body:
              application/json:
                type: GetBalanceResponse
          500:
            body:
              application/json:
                type: GetBalanceResponse

  /token:
    get:
      description: Retrieve the list of all token registered in Hancock
      responses:
        200:
          body:
            application/json:
              type: SmartContractListResponse
        500:
          body:
            application/json:
              type: GenericResponse
    /{address|alias}: 
      uriParameters: 
        address|alias: 
          type: string 
      delete:
        description: Unregister the Token in Hancock
        headers:
        responses:
          204:
          500:
            body:
              application/json:
                type: GenericResponse
      /balanceOf: 
        /{address}: 
          uriParameters: 
            address: 
              type: string 
          get: 
            description: Obtain the native ERC20 token currency balance of an address 
            responses: 
              200: 
                body: 
                  application/json: 
                    type: GetBalanceTokenResponse 
              500: 
                body: 
                  application/json: 
                    type: GenericResponse
      /metadata: 
        get: 
          description: Obtain the info associated to the ERC20 Token: name, symbol, decimals and totalSupply
          responses: 
            200: 
              body: 
                application/json: 
                  type: GetMetadataTokenResponse 
            500: 
              body: 
                application/json: 
                  type: GenericResponse
      /transfer:
        post:
          description: Transfer ERC20 tokens between two addresses by Query 
          body: 
            application/json:
              type: TransferTokenByQueryRequest
          responses:
            200:
            body:
              application/json:
                type: TransferTokenByQueryResponse
            400:
            500:
              body:
                application/json:
                  type: GenericResponse 
      /transferFrom:
        post:
          description: Transfer ERC20 tokens between two addresses by Query 
          body: 
            application/json:
              type: TransferFromTokenByQueryRequest
          responses:
            200:
            body:
              application/json:
                type: TransferFromTokenByQueryResponse
            400:
            500:
              body:
                application/json:
                  type: GenericResponse 
      /approve:
        post:
          description: Token ERC20 owner can approve for spender to transfer tokens from the token owner's account by query
          body: 
            application/json:
              type: ApproveTransferTokenByQueryRequest
          responses:
            200:
            body:
              application/json:
                type: ApproveTransferTokenByQueryResponse
            400:
            500:
            body:
              application/json:
                type: GenericResponse 
      /allowance:
        post:
          description: Provides the number of tokens allowed to be transferred from a given address by another given address by query
          body: 
            application/json:
              type: AllowanceTokenByQueryRequest
          responses:
            200:
            body:
              application/json:
                type: AllowanceTokenByQueryResponse
            400:
            500:
            body:
              application/json:
                type: GenericResponse
    /balanceOf: 
      get:
        queryParameters:
          address: 
            type: string
            description: address of the token wallet
            required: true
          contractAddress: 
            type: string
            description: address of the erc20 smartcontract
            required: true
        description: Obtain the native ERC20 token currency balance of an address 
        responses: 
          200: 
            body: 
              application/json: 
                type: GetBalanceTokenResponse 
          500: 
            body: 
              application/json: 
                type: GenericResponse
    /register:
      post:
        description: Register new ERC20 tokens in hancock to be invoked by alias or address
        body: 
          application/json:
            type: RegisterTokenRequest
        responses:
          200:
          body:
            application/json:
              type: RegisterTokenResponse
          400:
          500:
            body:
              application/json:
                type: GenericResponse
    /transfer:
      post:
        description: Transfer ERC20 tokens between two addresses 
        body: 
          application/json:
            type: TransferTokenRequest
        responses:
          200:
          body:
            application/json:
              type: TransferTokenResponse
          400:
          500:
            body:
              application/json:
                type: GenericResponse
    /transferFrom:
      post:
        description: Transfer ERC20 tokens between two addresses 
        body: 
          application/json:
            type: TransferFromTokenRequest
        responses:
          200:
          body:
            application/json:
              type: TransferFromTokenResponse
          400:
          500:
            body:
              application/json:
                type: GenericResponse
    /metadata: 
      get:
        queryParameters:
          address: 
            type: string
            description: address of the erc20
            required: true
        description: Obtain the info associated to the ERC20 Token: name, symbol, decimals and totalSupply
        responses: 
          200: 
            body: 
              application/json: 
                type: GetMetadataTokenResponse 
          500: 
            body: 
              application/json: 
                type: GenericResponse
    /approve:
      post:
        description: Token ERC20 owner can approve for spender to transfer tokens from the token owner's account
        body: 
          application/json:
            type: ApproveTransferTokenRequest
        responses:
          200:
          body:
            application/json:
              type: ApproveTransferTokenResponse
          400:
          500:
          body:
            application/json:
              type: GenericResponse       
    /allowance:
      post:
        description: Provides the number of tokens allowed to be transferred from a given address by another given address
        body: 
          application/json:
            type: AllowanceTokenRequest
        responses:
          200:
          body:
            application/json:
              type: AllowanceTokenResponse
          400:
          500:
          body:
            application/json:
              type: GenericResponse            

/protocol:
  displayName: Protocol
  description: API to adapt operations to Hancock Protocol

  /encode:
    post:
      description: Encode operation data to Hancock Protocol
      queryParameters: 
        application/json:
          type: ProtocolEncodeModelRequest
      responses:
        200:
          body:
            application/json:
              type: string
        400:

  /decode:
    get:
      description: Obtein operation decode
      queryParameters: 
        application/json:
          type: ProtocolDecodeModelRequest
      responses:
        200:
          body:
            application/json:
              type: ProtocolDecodeModelResponse
        400:
