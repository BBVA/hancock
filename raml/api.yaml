
openapi: 3.0.0

info:
  title: Hancock dlt adapter API
  version: "7.0.4"
  description: "DLT Adapter is a web service that abstracts user interactions with DLT networks on a high-level common HTTP REST interface that conveniently provides the user with the specific DLT type adapted transaction that can be easily inspected, signed and personally sent to a DLT network trusted node of the choice of the user. 
	\n \n <strong>Current blockchains supported {dlt}</strong> `ethereum`    "
  contact:
    name: BBVA Hancock
    url: https://github.com/BBVA/hancock-dlt-adapter
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers: 
  - url: https://host/{version}/dlt-adapter
host: "https://host/{version}/dlt-adapter"
tags:
- name: "{dlt}/smartcontracts"
  description: "All operations about smartcontracts registered in Hancock, as well as operations with smartcontract with abi attached."
  externalDocs:
    description: "Find out more"
    url: "https://github.com/BBVA/hancock-dlt-adapter"
- name: "{dlt}/transfers"
  description: "Adapt a transfer call to the DLT between two addresses."
  externalDocs:
    description: "Find out more"
    url: "https://github.com/BBVA/hancock-dlt-adapter"
- name: "{dlt}/balance"
  description: "Obtain the native cryptocurrency balance of an address."
  externalDocs:
    description: "Find out more"
    url: "https://github.com/BBVA/hancock-dlt-adapter"
- name: "{dlt}/token"
  description: "All operations about ERC20 tokens, a facility to operate with tokens of ethereum.
  \n 
  \n All token`s operations about ERC20 tokens can be invoked without {addressAlias} parameter in path, and with smartcontract 
  address in request form ('smartContractAddress':'') on post calls, or with queryparam (contractAddress='') on get calls."
  externalDocs:
    description: "Find out more"
    url: "https://github.com/BBVA/hancock-dlt-adapter"
- name: "Protocol"
  description: "API to adapt operations to Hancock Protocol, transform de data operations to a encode protocol to work with qr code."

paths:
  /{dlt}/smartcontracts:
    get:
      tags:
      - "{dlt}/smartcontracts"
      operationId: List of smartcontracts
      description: Retrieve the list of all smart contracts registered in Hancock.    
      parameters:
        - name: dlt
          in: path
          description: Dlt to work with 
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of smartcontracts registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/smartContractListResponse'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
  /{dlt}/smartcontracts/{addressAlias}:
    get:
      tags:
      - "{dlt}/smartcontracts"
      operationId: Abi of a smartcontract
      description: Retrieve ABI from registered Smart Contract in Hancock.    
      parameters:
        - name: dlt
          in: path
          description: Dlt to work with 
          required: true
          schema:
            type: string
        - name: addressAlias
          in: path
          description: Address or alias of the smartcontract
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Properties of registered smartcontract
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/smartContractResponse'
        '404':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'                
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
    delete:
      tags:
      - "{dlt}/smartcontracts"
      operationId: Delete a registered smartcontract
      description: Delete a registered Smart Contract in Hancock.    
      parameters:
        - name: dlt
          in: path
          description: Dlt to work with 
          required: true
          schema:
            type: string
        - name: addressAlias
          in: path
          description: Address or alias of the smartcontract
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Smartcontract registration deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericResponse'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
  /{dlt}/smartcontracts/deploy:
    post:
      tags:
      - "{dlt}/smartcontracts"
      operationId: Adapt deploy smartcontract
      description: Adapt a Smart Contract deployment transaction. Give a binary data to deploy the smartcontract in a dlt network.
      consumes:
        - "application/json"  
      parameters:
        - name: dlt
          in: path
          description: Dlt to work with 
          required: true
          schema:
            type: string          
      requestBody:
        content:
          application/json:              
            schema: 
              $ref: '#/components/schemas/transactionDeployRequest'    
        description: Deploy request schema to adapt the deploy order  
        required: true                       
      responses:
        '200':
          description: Deploy success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/transactionDeployResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'  
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
  /{dlt}/smartcontracts/invoke:
    post:
      tags:
      - "{dlt}/smartcontracts"
      operationId: Adapt invocation smartcontract
      description: Adapt a Smart Contract invocation transaction.    
      parameters:
        - name: dlt
          in: path
          description: Dlt to work with 
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:              
            schema: 
              $ref: '#/components/schemas/transactionInvokeRequest'    
        description: Invoke request schema to adapt the invoke order  
        required: true               
      responses:
        '200':
          description: Action send to DLT network
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/transactionInvokeResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'  
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'   
  /{dlt}/smartcontracts/invoke/{addressAlias}:
    post:
      tags:
      - "{dlt}/smartcontracts"
      operationId: Adapt invocation method of smartcontract
      description: Adapt transaction that will invoke a method in the registered Smart Contract  
      parameters:
        - name: dlt
          in: path
          description: Dlt to work with 
          required: true
          schema:
            type: string
        - name: addressAlias
          in: path
          description: Address or alias registered in Hancock of the smartcontract 
          required: true
          schema:
            type: string            
      requestBody:
        content:
          application/json:              
            schema: 
              $ref: '#/components/schemas/transactionInvokeRegisterRequest'    
        description: Invoke request schema to adapt the invoke order  
        required: true       
      responses:
        '200':
          description: Action send to DLT network
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/transactionInvokeResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'  
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'                 
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'  
  /{dlt}/smartcontracts/invoke/abi:
    post:
      tags:
      - "{dlt}/smartcontracts"
      operationId: Adapt invocation method with abi
      description: Adapt transaction that will invoke a method in the registered Smart Contract with abi in params  
      parameters:
        - name: dlt
          in: path
          description: Dlt to work with 
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:              
            schema: 
              $ref: '#/components/schemas/transactionInvokeAbiRequest'    
        description: Invoke request schema to adapt the invoke order  
        required: true               
      responses:
        '200':
          description: Action send to DLT network
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/transactionInvokeResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'  
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'                 
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'                  
  /{dlt}/smartcontracts/register:
    post:
      tags:
      - "{dlt}/smartcontracts"
      operationId: Register smartcontract
      description: Register a deployed Smart Contract.  
      consumes:
        - "application/json"  
      parameters:
        - name: dlt
          in: path
          description: Dlt to work with 
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:              
            schema: 
              $ref: '#/components/schemas/transactionRegisterRequest'    
        description: Invoke request schema to adapt the invoke order  
        required: true                                             
      responses:
        '201':
          description: Successful registration action
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'  
        '409':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericResponse'                  
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'    
  /{dlt}/transfers:
    post:
      tags:
      - "{dlt}/transfers"
      operationId: Adapt transfer
      description: Adapt a transfer call to the DLT between two addresses.  
      consumes:
        - "application/json"  
      parameters:
        - name: dlt
          in: path
          description: Dlt to work with 
          required: true
          schema:
            type: string       
      requestBody:
        content:
          application/json:              
            schema: 
              $ref: '#/components/schemas/transferRequest'    
        description: Transfer request schema to adapt the transfer order  
        required: true                                                 
      responses:
        '200':
          description: Transfer send to mine on DLT network
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/transferResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'               
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'          
  /{dlt}/balance/{address}:
    get:
      tags:
      - "{dlt}/balance"
      operationId: Balance
      description: Obtain the native cryptocurrency balance of an address.    
      parameters:
        - name: dlt
          in: path
          description: Dlt to work with 
          required: true
          schema:
            type: string
        - name: address
          in: path
          description: Address of the user
          required: true
          schema:
            type: string  
      responses:
        '200':
          description: The native cryptocurrency balance of an address
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/balanceResponse'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'      
  /{dlt}/token:
    get:
      tags:
      - "{dlt}/token"
      operationId: Token list
      description: Retrieve the list of all ERC20 tokens of Ethereum environment registered in Hancock.    
      parameters:
        - name: dlt
          in: path
          description: Dlt to work with 
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The list of all token registered in Hancock
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/smartContractListResponse'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'     
  /{dlt}/token/{addressAlias}:
    delete:
      tags:
      - "{dlt}/token"
      operationId: Delete a registered token
      description: Unregister the token in Hancock.    
      parameters:
        - name: dlt
          in: path
          description: Dlt to work with 
          required: true
          schema:
            type: string
        - name: addressAlias
          in: path
          description: Address or alias of the token smartcontract
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Token registration deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericResponse'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'      
  /{dlt}/token/{addressAlias}/balanceOf/{address}:
    get:
      tags:
      - "{dlt}/token"
      operationId: Token balance
      description: Obtain the native ERC20 token currency balance of an address.    
      parameters:
        - name: dlt
          in: path
          description: Dlt to work with 
          required: true
          schema:
            type: string
        - name: addressAlias
          in: path
          description: Address or alias of the token smartcontract
          required: true
          schema:
            type: string 
        - name: address
          in: path
          description: Address of the user
          required: true
          schema:
            type: string                    
      responses:
        '200':
          description: Get token balance operation success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/balancetokenResponse'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'        
  /{dlt}/token/{addressAlias}/metadata:
    get:
      tags:
      - "{dlt}/token"
      operationId: Token metadata
      description: Obtain the info associated to the ERC20 Token (name, symbol, decimals and totalSupply).    
      parameters:
        - name: dlt
          in: path
          description: Dlt to work with 
          required: true
          schema:
            type: string
        - name: addressAlias
          in: path
          description: Address or alias of the token smartcontract
          required: true
          schema:
            type: string             
      responses:
        '200':
          description: Info associated to the ERC20 Token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/metadataResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'                   
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'     
  /{dlt}/token/{addressAlias}/transfer:
    post:
      tags:
      - "{dlt}/token"
      operationId: Adapt token transfer
      description: Adapt a token ERC20 transfer call to the DLT between two addresses.  
      consumes:
        - "application/json"  
      parameters:
        - name: dlt
          in: path
          description: Dlt to work with 
          required: true
          schema:
            type: string
        - name: addressAlias
          in: path
          description: Address or alias of the token smartcontract
          required: true
          schema:
            type: string                    
      requestBody:
        content:
          application/json:              
            schema: 
              $ref: '#/components/schemas/transferTokenRequest'    
        description: Transfer token request schema to adapt the order  
        required: true                                               
      responses:
        '200':
          description: Token transfer adapted to send
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/transferTokenResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'               
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'            
  /{dlt}/token/{addressAlias}/transferFrom:
    post:
      tags:
      - "{dlt}/token"
      operationId: Adapt token transferFrom
      description: Adapt a token ERC20 transferFrom call to the DLT between two addresses.  
      consumes:
        - "application/json"  
      parameters:
        - name: dlt
          in: path
          description: Dlt to work with 
          required: true
          schema:
            type: string
        - name: addressAlias
          in: path
          description: Address or alias of the token smartcontract
          required: true
          schema:
            type: string                 
      requestBody:
        content:
          application/json:              
            schema: 
              $ref: '#/components/schemas/transferfromTokenRequest'    
        description: Transferfrom token request schema to adapt the order  
        required: true                                                   
      responses:
        '200':
          description: Token transfer adapted to send
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/transferTokenResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'               
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'         
  /{dlt}/token/{addressAlias}/approve:
    post:
      tags:
      - "{dlt}/token"
      operationId: Adapt token approve
      description: Token ERC20 owner can approve for spender to transfer tokens from the token owner's account.  
      consumes:
        - "application/json"  
      parameters:
        - name: dlt
          in: path
          description: Dlt to work with 
          required: true
          schema:
            type: string
        - name: addressAlias
          in: path
          description: Address or alias of the token smartcontract
          required: true
          schema:
            type: string                 
      requestBody:
        content:
          application/json:              
            schema: 
              $ref: '#/components/schemas/approveTokenRequest'    
        description: Approve token request schema to adapt the order  
        required: true                                               
      responses:
        '200':
          description: Token approve order adapted to send
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/transferTokenResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'               
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'           
  /{dlt}/token/{addressAlias}/allowance:
    post:
      tags:
      - "{dlt}/token"
      operationId: Token allowance
      description: Provides the number of tokens allowed to be transferred from a given address by another given address.  
      consumes:
        - "application/json"  
      parameters:
        - name: dlt
          in: path
          description: Dlt to work with 
          required: true
          schema:
            type: string
        - name: addressAlias
          in: path
          description: Address or alias of the token smartcontract
          required: true
          schema:
            type: string               
      requestBody:
        content:
          application/json:              
            schema: 
              $ref: '#/components/schemas/allowanceTokenRequest'    
        description: Allowance token request schema to adapt the order  
        required: true                                               
      responses:
        '200':
          description: Token approve order adapted to send
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/allowanceTokenResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'               
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'                
  /protocol/encode:
    post:
      tags:
      - "Protocol"
      operationId: Encode
      description: Encode operation data to Hancock Protocol. Give us a code with all info to generate a qr. 
      consumes:
        - "application/json"      
      requestBody:
        content:
          application/json:              
            schema: 
              $ref: '#/components/schemas/encodeRequest'    
        description: Encode request schema  
        required: true                                                       
      responses:
        '200':
          description: Encode operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/encodeResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'                   
  /protocol/decode:
    post:
      tags:
      - "Protocol"
      operationId: Decode
      description: Obtain all data about an operation from an encoded string.  
      requestBody:
        content:
          application/json:              
            schema: 
              $ref: '#/components/schemas/decodeRequest'    
        description: Decode request schema   
        required: true              
      responses:
        '200':
          description: Decode operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/decodeResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'                                                                                                                                                                          
components:
  schemas:
    genericResponse:
      $schema: 'http://json-schema.org/schema'
      description: Generic Response Schema
      type: object
      properties:
        result:
          type: object
          properties:
            code:
              description: "Api code"
              type: string
            description:
              description: "Description about the api code"
              type: string
          required:
            - code
            - description
      required:
        - result
      example:
        result:
          code: 20X
          description: "DLT - Operation successfully requested"
    genericError:
      $schema: 'http://json-schema.org/schema'
      description: Generic Response Schema
      type: object
      properties:
        error:
          description: "Identification error code"
          type: string
        internalError:
          description: "Hancock error code"
          type: string
        message:
          description: "Hancock message"
          type: string
        extendedMessage:
          description: "Detailed message"
          type: string
      required:
        - error
        - internalError
      example:
        error: 400 - 500
        internalError: "HKAD5000X"
        message: "Call Error"
        extendedMessage: "Error: Description"
    smartContractListResponse:
      $schema: 'http://json-schema.org/schema'
      description: Registered Smart Contract Schema
      type: object
      properties:
        result:
          type: object
          properties:
            code:
              description: "Api code"
              type: string
            description:
              description: "Description about the api code"
              type: string
          required:
            - code
            - description
        data:
          list: smartcontract
          type: array
          items:
            type: object
            properties:
              address:
                description: "smartcontract address"
                type: string
              alias:
                description: "alias of smartcontract registered"
                type: string
              abi:
                description: "abi of the smartcontract"
                type: array
              abiname:
                description: "alias of the abi"
                type: string
            required:
              - address
              - alias
              - abi
      required:
        - result
      example: 
        result:
          code: 200
          description: "DLT - Operation successfully requested"
        data:
          list:
            address: "0xcffffffffffffff000000000000000000000000"
            alias: "smartcontract"
            abi: [{abi:[]}]
            abiname: "alias"
    smartContractResponse:
      $schema: 'http://json-schema.org/schema'
      description: Registered Smart Contract Schema
      type: object
      properties:
        result:
          type: object
          properties:
            code:
              description: "Api code"
              type: string
            description:
              description: "Description about the api code"
              type: string
          required:
            - code
            - description
        data:
          address:
            description: "smartcontract address"
            type: string
          alias:
            description: "alias of smartcontract registered"
            type: string
          abi:
            description: "abi of the smartcontract"
            type: array
          abiname:
            description: "alias of the abi"
            type: string        
          required:
            - address
            - alias
            - abi     
      required:
        - result
      example: 
        result:
          code: 200
          description: "DLT - Operation successfully requested"
        data:
          address: "0xcffffffffffffff000000000000000000000000"
          alias: "smartcontract"
          abi: [{abi:[]}]            
          abiname: "alias"          
    transactionDeployRequest:            
      $schema: 'http://json-schema.org/schema'
      description: Deploy request schema to adapt the deploy order
      type: object
      properties:
        method:
          in: "body"
          description: "Name of the constructor method of the smartcontract"
          schema:
            type: "string"
        params:
          in: "body"
          description: "Params to pass to the constructor of the smartcontract"
          schema:
            type: "array"
            items:
              type: "string"
        urlBase:
          in: "body"
          description: "Url where are stored the abi and the bin of the smart contract to invoke"
          type: "string"
        from:
          in: "body"
          description: "Address of the owner"
          type: "string"    
      required:
        - method
        - urlBase
        - from
      example:        
        method: constructor
        params: ["0xcffffffffffffff000000000000000000000000","2"]
        urlBase: "http://storage/smartcontract"
        from: "0xcffffffffffffff000000000000000000000000"                           
    transactionDeployResponse:            
      $schema: 'http://json-schema.org/schema'
      description: Created Smart Contract Response Schema
      type: object
      properties:
        result:
          type: object
          properties:
            code:
              description: "Api code"
              type: string
            description:
              description: "Description about the api code"
              type: string
          required:
            - code
            - description
        data:
          type: object
          properties:
            nonce:
              description: "Counter assigned to transaction"
              type: string
            from:
              description: "address of the owner"
              type: string
            data:
              description: "Smartcontract data encoded"
              type: string
            gas:
              description: "Gas limit assigned"
              type: string
            gasPrice:
              description: "Gas estimated assigned"
              type: string
      required:
        - result
        - data      
      example: 
        result:
          code: 200
          description: "DLT - Operation successfully requested"
        data:
          from: "0xcffffffffffffff000000000000000000000001"
          data: "0x606060405260a060405190810160405280604060405190810160405280600781526020017f637265617465640000000000000000000000000000000000000000000000000081"
          gasPrice: "0x3b9aca00"
          nonce: "0x642"
          gas: "0x5208"         
    transactionInvokeRequest:            
      $schema: 'http://json-schema.org/schema'
      description: Invoke request schema to adapt the invoke order
      type: object
      properties:
        method:
          in: "body"
          description: "Method to invoke in the smart contract"
          required: true
          schema:
            type: "string"
        params:
          in: "body"
          description: "Params to pass to the method"
          required: false
          schema:
            type: "array"
            items:
              type: "string"
        urlBase:
          in: "body"
          description: "Url where are stored the abi and the bin of the smart contract to invoke"
          required: true
          type: "string"
        from:
          in: "body"
          description: "Address of the owner"
          required: true
          type: "string"     
        to:
          in: "body"
          description: "Address of the smart contract to invoke"
          required: true
          type: "string"             
      example:        
        method: attest
        params: ["2"]
        urlBase: "http://storage/smartcontract"
        from: "0xcffffffffffffff000000000000000000000000"    
        to: "0xcffffffffffffff000000000000000000000001"                             
    transactionInvokeResponse:            
      $schema: 'http://json-schema.org/schema'
      description: Invoked Smart Contract Response Schema
      type: object
      properties:
        result:
          type: object
          properties:
            code:
              description: "Api code"
              type: string
            description:
              description: "Description about the api code"
              type: string
          required:
            - code
            - description
        data:
          type: object
          properties:
            nonce:
              description: "Counter assigned to transaction"
              type: string
            from:
              description: "address of the owner"
              type: string
            data:
              description: "Smartcontract data encoded"
              type: string
            gas:
              description: "Gas limit assigned"
              type: string
            gasPrice:
              description: "Gas estimated assigned"
              type: string
            to:
              description: "address of the smartcontract"
              type: string
      required:
        - result
        - data       
      example: 
        result:
          code: 200
          description: "DLT - Operation successfully requested"
        data:
          to: "0xcffffffffffffff000000000000000000000000"
          from: "0xcffffffffffffff000000000000000000000001"
          data: "transaction"
          gasPrice: "0x3b9aca00"
          nonce: "0x642"
          gas: "0x5208"        
    transactionInvokeRegisterRequest:            
      $schema: 'http://json-schema.org/schema'
      description: Invoke request schema to adapt the invoke order
      type: object
      properties:
        method:
          in: "body"
          description: "Method to invoke in the smart contract"
          required: true
          schema:
            type: "string"
        params:
          in: "body"
          description: "Params to pass to the method"
          required: false
          schema:
            type: "array"
            items:
              type: "string"
        from:
          in: "body"
          description: "Address of the owner"
          required: true
          type: "string"             
      example:        
        method: attest
        params: ["2"]
        from: "0xcffffffffffffff000000000000000000000000"               
    transactionInvokeAbiRequest:            
      $schema: 'http://json-schema.org/schema'
      description: Invoke request schema to adapt the invoke order
      type: object
      properties:
        method:
          in: "body"
          description: "Method to invoke in the smart contract"
          required: true
          schema:
            type: "string"
        action:
          in: "body"
          description: "Kind of action (send , call)"
          required: false
          schema:
            type: string
            enum: [send, call]
        params:
          in: "body"
          description: "Params to pass to the method"
          required: false
          schema:
            type: "array"
            items:
              type: "string"
        abi:
          in: "body"
          description: Abi of the smartcontract 
          required: true
          schema:
            type: array    
        from:
          in: "body"
          description: "Address of the owner"
          required: true
          type: "string"     
        to:
          in: "body"
          description: "Address of the smart contract to invoke"
          required: true
          type: "string"             
      example:        
        method: attest
        action: "call"
        params: ["2"]
        abi: [{abi:[]}]
        from: "0xcffffffffffffff000000000000000000000000"    
        to: "0xcffffffffffffff000000000000000000000001"  
    transactionRegisterRequest:            
      $schema: 'http://json-schema.org/schema'
      description: Invoke request schema to adapt the invoke order
      type: object
      properties:
        abi:
          in: "body"
          description: Abi of the smartcontract 
          schema:
            type: array    
        alias:
          in: "body"
          description: "Alias of the smartcontract"
          type: "string"     
        adddres:
          in: "body"
          description: "Address of the smartcontract"
          type: "string"  
      required:
        - abi
        - adddres
        - alias           
      example:        
        abi: [{abi:[]}]
        alias: "name"
        adddres: "0xcffffffffffffff000000000000000000000000"         
    transferRequest:            
      $schema: 'http://json-schema.org/schema'
      description: Transfer request schema
      type: object
      properties:
        from:
          in: "body"
          description: "Address of the sender in the DLT"
          schema:
            type: "string"
        to:
          in: "body"
          description: "Address of the receiver in the DLT"
          schema:
            type: "string"               
        value:
          in: "body"
          description: "Value of Weis to be transferred"
          schema:
            type: "string"
        data:
          in: "body"
          description: "Information about the transfer"
          required: false
          schema:
            type: "string"             
      required:
        - from
        - to
        - value  
      example: 
        to: "0xcffffffffffffff000000000000000000000000"
        from: "0xcffffffffffffff000000000000000000000001"
        data: "transaction"
        value: "2"                         
    transferResponse:            
      $schema: 'http://json-schema.org/schema'
      description: Transfer response schema
      type: object
      properties:
        result:
          type: object
          properties:
            code:
              description: "Api code"
              type: string
            description:
              description: "Description about the api code"
              type: string
          required:
            - code
            - description
        data:
          type: object
          properties:
            nonce:
              description: "Nonce assigned to transaction"
              type: string
            from:
              description: "Address of the sender in the DLT"
              type: string
            gas:
              description: "Gas value of transaction"
              type: string
            to:
              description: "Address of the receiver in the DLT"
              type: string
            gasPrice:
              description: "Gas estimated"
              type: string
            value:
              description: "Value of Weis to be transferred"
              type: string
            data:
              description: "Information about the transfer"
              type: string              
      required:
        - result
        - data  
      example: 
        result:
          code: 200
          description: "DLT - Operation successfully requested"
        data:
          to: "0xcffffffffffffff000000000000000000000000"
          from: "0xcffffffffffffff000000000000000000000001"
          data: "transaction"
          value: "2"
          gasPrice: "0x3b9aca00"
          nonce: "0x642"
          gas: "0x5208"          
    balanceResponse:
      $schema: 'http://json-schema.org/schema'
      description: Get balance Response Schema
      type: object
      properties:
        result:
          type: object
          properties:
            code:
              description: "Api code"
              type: string
            description:
              description: "Description about the api code"
              type: string
          required:
            - code
            - description
        data:
          balance:
            description: "Balance in minimum unit of the cryptocurrency"
            type: string
      required:
        - result
        - data 
      example: 
        result:
          code: 200
          description: "DLT - Operation successfully requested"
        data:
          balance: "2"        
    balancetokenResponse:
      $schema: 'http://json-schema.org/schema'
      description: Get balance token Response Schema
      type: object
      properties:
        result:
          type: object
          properties:
            code:
              description: "Api code"
              type: string
            description:
              description: "Description about the api code"
              type: string
          required:
            - code
            - description
        data:
          balance:
            description: "Token balance for account"
            type: string
      required:
        - result
        - data  
      example: 
        result:
          code: 200
          description: "DLT - Operation successfully requested"
        data:
          balance: "2"                 
    metadataResponse:            
      $schema: 'http://json-schema.org/schema'
      description: Metadata info Schema
      type: object
      properties:
        result:
          type: object
          properties:
            code:
              description: "Api code"
              type: string
            description:
              description: "Description about the api code"
              type: string
          required:
            - code
            - description
        data:
          type: object
          properties:
            name:
              description: "Token name"
              type: string
            symbol:
              description: "Symbol of token"
              type: string
            decimals:
              description: "Decimals defined in smartcontract"
              type: string
            totalSupply:
              description: "Supply total defined in smartcontract"
              type: string
      required:
        - result
        - data     
      example: 
        result:
          code: 200
          description: "DLT - Operation successfully requested"
        data:
          name: "Token name"                 
          symbol: "TKN"
          decimals: "0"
          totalSupply: "1000"
    transferTokenRequest:            
      $schema: 'http://json-schema.org/schema'
      description: Token request schema
      type: object
      properties:
        from:
          in: "body"
          description: "Address of the sender in the DLT"
          schema:
            type: "string"
        to:
          in: "body"
          description: "Address of the receiver in the DLT"
          schema:
            type: "string"               
        value:
          in: "body"
          description: "Value of token to be transfered"
          schema:
            type: "string"           
      required:
        - from
        - to
        - value  
      example: 
        to: "0xcffffffffffffff000000000000000000000000"
        from: "0xcffffffffffffff000000000000000000000001"
        value: "2"               
    transferTokenResponse:            
      $schema: 'http://json-schema.org/schema'
      description: Token response schema
      type: object
      properties:
        result:
          type: object
          properties:
            code:
              description: "Api code"
              type: string
            description:
              description: "Description about the api code"
              type: string
          required:
            - code
            - description
        data:
          type: object
          properties:
            nonce:
              description: "Nonce assigned to transaction"
              type: string
            from:
              description: "Address of the sender in the DLT"
              type: string
            gas:
              description: "Gas value of transaction"
              type: string
            to:
              description: "Address of the receiver in the DLT"
              type: string
            gasPrice:
              description: "Gas estimated"
              type: string
            data:
              description: "Information about the transfer"
              type: string           
      required:
        - result
        - data     
      example: 
        result:
          code: 200
          description: "DLT - Operation successfully requested"
        data:
          to: "0xcffffffffffffff000000000000000000000000"
          from: "0xcffffffffffffff000000000000000000000001"
          data: "0xa9059cbb000000000000000000000000de8e772f0350e992ddef81bf8f51d94a8ea9216d0000000000000000000000000000000000000000000000000000000000000001"
          gasPrice: "0x3b9aca00"
          nonce: "0x642"
          gas: "0x5208"  
    transferfromTokenRequest:            
      $schema: 'http://json-schema.org/schema'
      description: Token transferFrom request schema
      type: object
      properties:
        from:
          in: "body"
          description: "Address of the sender in the DLT"
          schema:
            type: "string"
        sender:
          in: "body"
          description: "Address with enough allowance in the DLT"
          schema:
            type: "string"              
        to:
          in: "body"
          description: "Address of the receiver in the DLT"
          schema:
            type: "string"               
        value:
          in: "body"
          description: "Value of token to be transfered"
          schema:
            type: "string"           
      required:
        - from
        - to
        - sender
        - value  
      example: 
        to: "0xcffffffffffffff000000000000000000000000"
        from: "0xcffffffffffffff000000000000000000000001"
        sender: "0xcffffffffffffff000000000000000000000002"
        value: "2"               
    approveTokenRequest:            
      $schema: 'http://json-schema.org/schema'
      description: Allowance request schema
      type: object
      properties:
        from:
          in: "body"
          description: "Address of the receiver in the DLT"
          schema:
            type: "string"
        spender:
          in: "body"
          description: "Address of the spender in the DLT"
          schema:
            type: "string"               
        value:
          in: "body"
          description: "Value of token to be transfered"
          schema:
            type: "string"        
      required:
        - from
        - spender
        - value  
      example: 
        to: "0xcffffffffffffff000000000000000000000000"
        spender: "0xcffffffffffffff000000000000000000000001"
        value: "2"              
    allowanceTokenRequest:            
      $schema: 'http://json-schema.org/schema'
      description: Allowance request schema
      type: object
      properties:
        from:
          in: "body"
          description: "Address of the receiver in the DLT"
          schema:
            type: "string"
        spender:
          in: "body"
          description: "Address of the spender in the DLT"
          schema:
            type: "string"               
        tokenOwner:
          in: "body"
          description: "Address of the owner in the DLT"
          schema:
            type: "string"           
      required:
        - from
        - spender
        - tokenOwner  
      example: 
        to: "0xcffffffffffffff000000000000000000000000"
        spender: "0xcffffffffffffff000000000000000000000001"
        tokenOwner: "0xcffffffffffffff000000000000000000000002"                       
    allowanceTokenResponse:            
      $schema: 'http://json-schema.org/schema'
      description: Allowance response schema
      type: object
      properties:
        result:
          type: object
          properties:
            code:
              description: "Api code"
              type: string
            description:
              description: "Description about the api code"
              type: string
          required:
            - code
            - description
        data:
          description: Amount of tokens approved
          type: string       
      required:
        - result
        - data     
      example: 
        result:
          code: 200
          description: "DLT - Operation successfully requested"
        data:
          data: "2"    
    decodeRequest:
      $schema: 'http://json-schema.org/schema'
      description: Protocol Decode Param Model Request
      type: object
      properties:
        code:
          description: "Encode string with data"
          type: string
      required:
      - code   
      example: 
        code: "hancock://qr?code=%7B%22action%22%3A%22transfer%22%2C%22body%22%3A%7B%22to%22%3A%22006c0a14f7561898b9ddc0c57652a53b2c6665443e%22%2C%22value%22%3A%221%22%2C%22data%22%3A%22concept%22%7D%2C%22dlt%22%3A%22ethereum%22%7D"            
    encodeResponse:
      $schema: 'http://json-schema.org/schema'
      description: Protocol Encode Param Model Response
      type: object
      properties:
        result:
          type: object
          properties:
            code:
              description: "Api code"
              type: string
            description:
              description: "Description about the api code"
              type: string
          required:
            - code
            - description
        data:
          type: object
          properties:
            qrEncode:
              description: "Encode string with data"
              type: string
          required:
            - qrEncode
      required:
        - result      
      example: 
        result:
          code: 200
          description: "DLT - Operation successfully requested"
        data:
          qrEncode: "hancock://qr?code=%7B%22action%22%3A%22transfer%22%2C%22body%22%3A%7B%22to%22%3A%22006c0a14f7561898b9ddc0c57652a53b2c6665443e%22%2C%22value%22%3A%221%22%2C%22data%22%3A%22concept%22%7D%2C%22dlt%22%3A%22ethereum%22%7D"            
    encodeRequest:          
      $schema: 'http://json-schema.org/schema'
      description: Protocol Encode Param Model Request
      type: object
      properties:
        action:
          description: "Action encoded"
          type: string
          enum:
            - transfer
        body:
          type: object
          properties:
            to:
              description: "address"
              type: string
            value:
              description: "value"
              type: string
            data:
              description: "data about transfer"
              type: string
        dlt:
          description: "dlt"
          type: string
          enum:
            - ethereum
      required:
        - action
        - body
        - dlt           
      example: 
        action: "transfer"
        body:
          to: "0xcffffffffffffff000000000000000000000000"
          value: "2"
          data: "concept"
        dlt: "Ethereum"             
    decodeResponse:          
      $schema: 'http://json-schema.org/schema'
      description: Protocol Decode Param Model Response
      type: object
      properties:
        result:
          type: object
          properties:
            code:
              description: "Api code"
              type: string
            description:
              description: "Description about the api code"
              type: string
          required:
            - code
            - description
        data:
          type: object
          properties:
            action:
              description: "Action encoded"
              type: string
              enum:
                - transfer
            body:
              type: object
              properties:
                to:
                  description: "address"
                  type: string
                value:
                  description: "value"
                  type: string
                data:
                  description: "data about transfer"
                  type: string
            dlt:
              description: "dlt"
              type: string
              enum:
                - ethereum
          required:
            - action
            - body
            - dlt
      required:
        - result              
      example: 
        result:
          code: 200
          description: "DLT - Operation successfully requested"
        data:
          action: "transfer"
          body:
            to: "0xcffffffffffffff000000000000000000000000"
            value: "2"
            data: "concept"
          dlt: "Ethereum"            
                    
